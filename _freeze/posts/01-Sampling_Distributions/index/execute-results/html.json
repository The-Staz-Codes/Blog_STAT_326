{
  "hash": "7f8befa20e5282192dca577a38a9d5a7",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Mini-Project #1\"\nauthor: \"Jason Stasio\"\nformat: \n  html:\n    embed-resources: true\neditor: visual\n---\n\n\n\n**Sampling Distribution of the Sample Minimum and Maximum**\n\n#### Set up\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Clear the environment\nrm(list = ls())\n# Load in packages\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n:::\n\n\n\n#### Model Population Distributions for Different Settings\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnorm_df <- tibble(x = seq(3, 17, length.out = 1000),\n                  dens = dnorm(x, mean = 10, sd = 2),\n                  pop = \"normal(10, 4)\")\nunif_df <- tibble(x = seq(7, 13, length.out = 1000),\n                  dens = dunif(x, 7, 13),\n                  pop = \"uniform(7, 13)\")\nexp_df <- tibble(x = seq(0, 10, length.out = 1000),\n                 dens = dexp(x, 0.5),\n                 pop = \"exp(0.5)\")\nbeta_df <- tibble(x = seq(0, 1, length.out = 1000),\n                  dens = dbeta(x, 8, 2),\n                  pop = \"beta(8, 2)\")\n\npop_plot <- bind_rows(norm_df, unif_df, exp_df, beta_df) |>\n  mutate(pop = fct_relevel(pop, c(\"normal(10, 4)\", \"uniform(7, 13)\",\n                                  \"exp(0.5)\", \"beta(8, 2)\")))\n\nggplot(data = pop_plot, aes(x = x, y = dens)) +\n  geom_line() +\n  theme_minimal() +\n  facet_wrap(~ pop, nrow = 1, scales = \"free\") +\n  labs(title = \"Population Distributions for Each Simulation Setting\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\n\n## First Simulation: Normal Distribution\n\n#### Generate the sample minimum\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 5       # sample size\nmu <- 10     # population mean\nsigma <- 4   # population standard deviation\n\n# generate a random sample of n observations from a normal population\nsingle_sample <- rnorm(n, mu, sigma) |> round(2)\n# look at the sample\nsingle_sample \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  8.58  7.48  7.90 15.28  2.99\n```\n\n\n:::\n\n```{.r .cell-code}\n# compute the sample min\nsample_min <- min(single_sample)\n# look at the sample min\nsample_min   \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2.99\n```\n\n\n:::\n:::\n\n\n\n#### Run simulation for sample minimum\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 5            # sample size\nmu <- 10          # population mean\nsigma <- 4        # population standard deviation\n\ngenerate_samp_min <- function(mu, sigma, n) {\n  \n  single_sample <- rnorm(n, mu, sigma)\n  sample_min <- min(single_sample)\n  \n  return(sample_min)\n}\n\n## test function once:\ngenerate_samp_min(mu = mu, sigma = sigma, n = n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 8.403152\n```\n\n\n:::\n\n```{.r .cell-code}\nnsim <- 5000      # number of simulations\n\n## code to map through the function. \n## the \\(i) syntax says to just repeat the generate_samp_min function\n## nsim times\nmins <- map_dbl(1:nsim, \\(i) generate_samp_min(mu = mu, sigma = sigma, n = n))\n\n## print some of the 5000 mins\n## each number represents the sample min from __one__ sample.\nmins_df <- tibble(mins)\nmins_df\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5,000 × 1\n     mins\n    <dbl>\n 1  4.12 \n 2  6.59 \n 3 -0.988\n 4  5.27 \n 5  7.66 \n 6  7.41 \n 7  7.74 \n 8  6.75 \n 9  5.61 \n10  4.23 \n# ℹ 4,990 more rows\n```\n\n\n:::\n\n```{.r .cell-code}\nggplot(data = mins_df, aes(x = mins)) +\n  geom_histogram(colour = \"deeppink4\", fill = \"deeppink1\", bins = 20) +\n  theme_minimal() +\n  labs(x = \"Observed Sample Mins\",\n       title = paste(\"Sampling Distribution of the \\nSample Min when n =\", n))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n\n```{.r .cell-code}\nmins_df |>\n  summarise(min_samp_dist = min(mins),\n            var_samp_dist = var(mins),\n            sd_samp_dist = sd(mins))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  min_samp_dist var_samp_dist sd_samp_dist\n          <dbl>         <dbl>        <dbl>\n1         -5.48          6.80         2.61\n```\n\n\n:::\n:::\n\n\n\n#### Generate the sample maximum\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 5       # sample size\nmu <- 10     # population mean\nsigma <- 4   # population standard deviation\n\n# generate a random sample of n observations from a normal population\nsingle_sample <- rnorm(n, mu, sigma) |> round(2)\n# look at the sample\nsingle_sample \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  5.55  8.66 12.43 16.54  1.27\n```\n\n\n:::\n\n```{.r .cell-code}\n# compute the sample max\nsample_max <- max(single_sample)\n# look at the sample max\nsample_max  \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 16.54\n```\n\n\n:::\n:::\n\n\n\n#### Run a simualtion for the sample maximum\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 5            # sample size\nmu <- 10          # population mean\nsigma <- 4        # population standard deviation\n\ngenerate_samp_max <- function(mu, sigma, n) {\n  \n  single_sample <- rnorm(n, mu, sigma)\n  sample_max <- max(single_sample)\n  \n  return(sample_max)\n}\n\n## test function once:\ngenerate_samp_max(mu = mu, sigma = sigma, n = n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 13.05232\n```\n\n\n:::\n\n```{.r .cell-code}\nnsim <- 5000      # number of simulations\n\n## code to map through the function. \n## the \\(i) syntax says to just repeat the generate_samp_max function\n## nsim times\nmaxs <- map_dbl(1:nsim, \\(i) generate_samp_max(mu = mu, sigma = sigma, n = n))\n\n## print some of the 5000 maxs\n## each number represents the sample max from __one__ sample.\nmaxs_df <- tibble(maxs)\nmaxs_df\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5,000 × 1\n    maxs\n   <dbl>\n 1  13.6\n 2  10.6\n 3  15.2\n 4  17.7\n 5  12.6\n 6  16.8\n 7  14.4\n 8  14.3\n 9  19.3\n10  15.0\n# ℹ 4,990 more rows\n```\n\n\n:::\n\n```{.r .cell-code}\nggplot(data = maxs_df, aes(x = maxs)) +\n  geom_histogram(colour = \"deeppink4\", fill = \"deeppink1\", bins = 20) +\n  theme_minimal() +\n  labs(x = \"Observed Sample Maxs\",\n       title = paste(\"Sampling Distribution of the \\nSample Max when n =\", n))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n\n```{.r .cell-code}\nmaxs_df |>\n  summarise(max_samp_dist = max(maxs),\n            var_samp_dist = var(maxs),\n            sd_samp_dist = sd(maxs))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  max_samp_dist var_samp_dist sd_samp_dist\n          <dbl>         <dbl>        <dbl>\n1          27.0          7.19         2.68\n```\n\n\n:::\n:::\n\n\n\n## Second Simulation: Uniform Distribution\n\n#### Generate the sample minimum\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 5       # sample size\ntheta_1 <- 7     # Starting point\ntheta_2 <- 13   # Ending point\n\n# generate a random sample of n observations from a normal population\nsingle_sample <- runif(n = n, min = theta_1, max = theta_2) |> round(2)\n# look at the sample\nsingle_sample \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 11.03 10.05 11.31 11.37 11.39\n```\n\n\n:::\n\n```{.r .cell-code}\n# compute the sample min\nsample_min <- min(single_sample)\n# look at the sample min\nsample_min \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 10.05\n```\n\n\n:::\n:::\n\n\n\n#### Run simulation for the sample minimum\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 5       # sample size\ntheta_1 <- 7     # Starting point\ntheta_2 <- 13   # Ending point\n\ngenerate_samp_min <- function(theta_1, theta_2, n) {\n  \n  single_sample <- runif(n, theta_1, theta_2)\n  sample_min <- min(single_sample)\n  \n  return(sample_min)\n}\n\n## test function once:\ngenerate_samp_min(theta_1 = theta_1, theta_2 = theta_2, n = n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 7.210427\n```\n\n\n:::\n\n```{.r .cell-code}\nnsim <- 5000      # number of simulations\n\n## code to map through the function. \n## the \\(i) syntax says to just repeat the generate_samp_min function\n## nsim times\nmins <- map_dbl(1:nsim, \\(i) generate_samp_min(theta_1 = theta_1, theta_2 = theta_2, n = n))\n\n## print some of the 5000 mins\n## each number represents the sample min from __one__ sample.\nmins_df <- tibble(mins)\nmins_df\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5,000 × 1\n    mins\n   <dbl>\n 1  7.30\n 2  7.26\n 3  7.48\n 4  7.65\n 5  8.67\n 6  7.42\n 7  7.86\n 8  7.38\n 9  7.93\n10  7.09\n# ℹ 4,990 more rows\n```\n\n\n:::\n\n```{.r .cell-code}\nggplot(data = mins_df, aes(x = mins)) +\n  geom_histogram(colour = \"deeppink4\", fill = \"deeppink1\", bins = 20) +\n  theme_minimal() +\n  labs(x = \"Observed Sample Mins\",\n       title = paste(\"Sampling Distribution of the \\nSample Min when n =\", n))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n\n```{.r .cell-code}\nmins_df |>\n  summarise(min_samp_dist = min(mins),\n            var_samp_dist = var(mins),\n            sd_samp_dist = sd(mins))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  min_samp_dist var_samp_dist sd_samp_dist\n          <dbl>         <dbl>        <dbl>\n1          7.00         0.725        0.851\n```\n\n\n:::\n:::\n\n\n\n#### Generate the sample maximum\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 5       # sample size\ntheta_1 <- 7     # Starting point\ntheta_2 <- 13   # Ending point\n\n# generate a random sample of n observations from a normal population\nsingle_sample <- runif(n = n, min = theta_1, max = theta_2) |> round(2)\n# look at the sample\nsingle_sample \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  7.35  9.24 11.73  8.38 12.57\n```\n\n\n:::\n\n```{.r .cell-code}\n# compute the sample max\nsample_max <- max(single_sample)\n# look at the sample max\nsample_max \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 12.57\n```\n\n\n:::\n:::\n\n\n\n#### Run simulation for the sample maximum\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 5       # sample size\ntheta_1 <- 7     # Starting point\ntheta_2 <- 13   # Ending point\n\ngenerate_samp_max <- function(theta_1, theta_2, n) {\n  \n  single_sample <- runif(n, theta_1, theta_2)\n  sample_max <- max(single_sample)\n  \n  return(sample_max)\n}\n\n## test function once:\ngenerate_samp_max(theta_1 = theta_1, theta_2 = theta_2, n = n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 12.38768\n```\n\n\n:::\n\n```{.r .cell-code}\nnsim <- 5000      # number of simulations\n\n## code to map through the function. \n## the \\(i) syntax says to just repeat the generate_samp_max function\n## nsim times\nmaxs <- map_dbl(1:nsim, \\(i) generate_samp_max(theta_1 = theta_1, theta_2 = theta_2, n = n))\n\n## print some of the 5000 maxs\n## each number represents the sample max from __one__ sample.\nmaxs_df <- tibble(maxs)\nmaxs_df\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5,000 × 1\n    maxs\n   <dbl>\n 1 12.8 \n 2 12.9 \n 3 12.5 \n 4 11.5 \n 5 12.5 \n 6  9.80\n 7 10.6 \n 8 10.4 \n 9 12.2 \n10 12.4 \n# ℹ 4,990 more rows\n```\n\n\n:::\n\n```{.r .cell-code}\nggplot(data = maxs_df, aes(x = maxs)) +\n  geom_histogram(colour = \"deeppink4\", fill = \"deeppink1\", bins = 20) +\n  theme_minimal() +\n  labs(x = \"Observed Sample Maxs\",\n       title = paste(\"Sampling Distribution of the \\nSample Max when n =\", n))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n\n```{.r .cell-code}\nmaxs_df |>\n  summarise(max_samp_dist = max(maxs),\n            var_samp_dist = var(maxs),\n            sd_samp_dist = sd(maxs))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  max_samp_dist var_samp_dist sd_samp_dist\n          <dbl>         <dbl>        <dbl>\n1          13.0         0.703        0.838\n```\n\n\n:::\n:::\n\n\n\n## Third Simualtion: Exponential\n\n#### Generate the sample minimum\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 5       # sample size\nlambda <- 0.5     # Value for lambda\n\n# generate a random sample of n observations from a normal population\nsingle_sample <- rexp(n = n, rate = lambda) |> round(2)\n# look at the sample\nsingle_sample \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.43 0.55 0.40 3.30 2.93\n```\n\n\n:::\n\n```{.r .cell-code}\n# compute the sample min\nsample_min <- min(single_sample)\n# look at the sample min\nsample_min \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.4\n```\n\n\n:::\n:::\n\n\n\n#### Run simulation for the sample minimum\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 5       # sample size\nlambda <- 0.5     # Value for lambda\n\n\ngenerate_samp_min <- function(lambda, n) {\n  \n  single_sample <- rexp(n, lambda)\n  sample_min <- min(single_sample)\n  \n  return(sample_min)\n}\n\n## test function once:\ngenerate_samp_min(lambda = lambda, n = n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.1471522\n```\n\n\n:::\n\n```{.r .cell-code}\nnsim <- 5000      # number of simulations\n\n## code to map through the function. \n## the \\(i) syntax says to just repeat the generate_samp_min function\n## nsim times\nmins <- map_dbl(1:nsim, \\(i) generate_samp_min(lambda = lambda, n = n))\n\n## print some of the 5000 mins\n## each number represents the sample min from __one__ sample.\nmins_df <- tibble(mins)\nmins_df\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5,000 × 1\n     mins\n    <dbl>\n 1 0.162 \n 2 0.0962\n 3 0.319 \n 4 0.0418\n 5 0.243 \n 6 0.0752\n 7 0.583 \n 8 1.02  \n 9 0.218 \n10 0.759 \n# ℹ 4,990 more rows\n```\n\n\n:::\n\n```{.r .cell-code}\nggplot(data = mins_df, aes(x = mins)) +\n  geom_histogram(colour = \"deeppink4\", fill = \"deeppink1\", bins = 20) +\n  theme_minimal() +\n  labs(x = \"Observed Sample Mins\",\n       title = paste(\"Sampling Distribution of the \\nSample Min when n =\", n))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n\n```{.r .cell-code}\nmins_df |>\n  summarise(min_samp_dist = min(mins),\n            var_samp_dist = var(mins),\n            sd_samp_dist = sd(mins))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  min_samp_dist var_samp_dist sd_samp_dist\n          <dbl>         <dbl>        <dbl>\n1     0.0000434         0.147        0.383\n```\n\n\n:::\n:::\n\n\n\n#### Generate the sample maximum\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 5       # sample size\nlambda <- 0.5     # Value for lambda\n\n# generate a random sample of n observations from a normal population\nsingle_sample <- rexp(n = n, rate = lambda) |> round(2)\n# look at the sample\nsingle_sample \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  2.14  2.95  1.63  1.56 13.15\n```\n\n\n:::\n\n```{.r .cell-code}\n# compute the sample max\nsample_max <- max(single_sample)\n# look at the sample max\nsample_max \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 13.15\n```\n\n\n:::\n:::\n\n\n\n#### Run simulation for the sample maximum\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 5       # sample size\nlambda <- 0.5     # Value for lambda\n\n\ngenerate_samp_max <- function(lambda, n) {\n  \n  single_sample <- rexp(n, lambda)\n  sample_max <- max(single_sample)\n  \n  return(sample_max)\n}\n\n## test function once:\ngenerate_samp_max(lambda = lambda, n = n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 9.432147\n```\n\n\n:::\n\n```{.r .cell-code}\nnsim <- 5000      # number of simulations\n\n## code to map through the function. \n## the \\(i) syntax says to just repeat the generate_samp_max function\n## nsim times\nmaxs <- map_dbl(1:nsim, \\(i) generate_samp_max(lambda = lambda, n = n))\n\n## print some of the 5000 maxs\n## each number represents the sample max from __one__ sample.\nmaxs_df <- tibble(maxs)\nmaxs_df\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5,000 × 1\n    maxs\n   <dbl>\n 1  5.85\n 2  2.47\n 3  3.32\n 4  6.56\n 5  3.02\n 6  4.05\n 7  3.18\n 8  1.74\n 9  5.71\n10  9.65\n# ℹ 4,990 more rows\n```\n\n\n:::\n\n```{.r .cell-code}\nggplot(data = maxs_df, aes(x = maxs)) +\n  geom_histogram(colour = \"deeppink4\", fill = \"deeppink1\", bins = 20) +\n  theme_minimal() +\n  labs(x = \"Observed Sample Maxs\",\n       title = paste(\"Sampling Distribution of the \\nSample Max when n =\", n))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n\n```{.r .cell-code}\nmaxs_df |>\n  summarise(max_samp_dist = max(maxs),\n            var_samp_dist = var(maxs),\n            sd_samp_dist = sd(maxs))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  max_samp_dist var_samp_dist sd_samp_dist\n          <dbl>         <dbl>        <dbl>\n1          24.9          5.67         2.38\n```\n\n\n:::\n:::\n\n\n\n## Fourth Simulation: Beta Distribution\n\n#### Generate the sample minimum\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 5        # sample size\nalpha <- 8    # Alpha value\nbeta <- 2     # Beta value\n  \n# generate a random sample of n observations from a normal population\nsingle_sample <- rbeta(n = n, shape1 = alpha, shape2 = beta) |> round(2)\n# look at the sample\nsingle_sample \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.98 0.93 0.76 0.61 0.85\n```\n\n\n:::\n\n```{.r .cell-code}\n# compute the sample min\nsample_min <- min(single_sample)\n# look at the sample min\nsample_min \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.61\n```\n\n\n:::\n:::\n\n\n\n#### Run simulation for the sample minimum\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 5       # sample size\nalpha <- 8    # Alpha value\nbeta <- 2     # Beta value\n\ngenerate_samp_min <- function(alpha, beta, n) {\n  \n  single_sample <- rbeta(n, alpha, beta)\n  sample_min <- min(single_sample)\n  \n  return(sample_min)\n}\n\n## test function once:\ngenerate_samp_min(alpha = alpha, beta = beta, n = n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.6672828\n```\n\n\n:::\n\n```{.r .cell-code}\nnsim <- 5000      # number of simulations\n\n## code to map through the function. \n## the \\(i) syntax says to just repeat the generate_samp_min function\n## nsim times\nmins <- map_dbl(1:nsim, \\(i) generate_samp_min(alpha = alpha, beta = beta, n = n))\n\n## print some of the 5000 mins\n## each number represents the sample min from __one__ sample.\nmins_df <- tibble(mins)\nmins_df\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5,000 × 1\n    mins\n   <dbl>\n 1 0.679\n 2 0.747\n 3 0.765\n 4 0.659\n 5 0.665\n 6 0.845\n 7 0.551\n 8 0.669\n 9 0.696\n10 0.581\n# ℹ 4,990 more rows\n```\n\n\n:::\n\n```{.r .cell-code}\nggplot(data = mins_df, aes(x = mins)) +\n  geom_histogram(colour = \"deeppink4\", fill = \"deeppink1\", bins = 20) +\n  theme_minimal() +\n  labs(x = \"Observed Sample Mins\",\n       title = paste(\"Sampling Distribution of the \\nSample Min when n =\", n))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n\n```{.r .cell-code}\nmins_df |>\n  summarise(min_samp_dist = min(mins),\n            var_samp_dist = var(mins),\n            sd_samp_dist = sd(mins))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  min_samp_dist var_samp_dist sd_samp_dist\n          <dbl>         <dbl>        <dbl>\n1         0.263        0.0113        0.106\n```\n\n\n:::\n:::\n\n\n\n#### Generate the sample maximum\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 5        # sample size\nalpha <- 8    # Alpha value\nbeta <- 2     # Beta value\n  \n# generate a random sample of n observations from a normal population\nsingle_sample <- rbeta(n = n, shape1 = alpha, shape2 = beta) |> round(2)\n# look at the sample\nsingle_sample \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.71 0.94 0.66 0.89 0.58\n```\n\n\n:::\n\n```{.r .cell-code}\n# compute the sample max\nsample_max <- max(single_sample)\n# look at the sample max\nsample_max\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.94\n```\n\n\n:::\n:::\n\n\n\n#### Run simulation for the sample minimum\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 5       # sample size\nalpha <- 8    # Alpha value\nbeta <- 2     # Beta value\n\ngenerate_samp_max <- function(alpha, beta, n) {\n  \n  single_sample <- rbeta(n, alpha, beta)\n  sample_max <- max(single_sample)\n  \n  return(sample_max)\n}\n\n## test function once:\ngenerate_samp_max(alpha = alpha, beta = beta, n = n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.9186055\n```\n\n\n:::\n\n```{.r .cell-code}\nnsim <- 5000      # number of simulations\n\n## code to map through the function. \n## the \\(i) syntax says to just repeat the generate_samp_max function\n## nsim times\nmaxs <- map_dbl(1:nsim, \\(i) generate_samp_max(alpha = alpha, beta = beta, n = n))\n\n## print some of the 5000 maxs\n## each number represents the sample max from __one__ sample.\nmaxs_df <- tibble(mins)\nmaxs_df\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5,000 × 1\n    mins\n   <dbl>\n 1 0.679\n 2 0.747\n 3 0.765\n 4 0.659\n 5 0.665\n 6 0.845\n 7 0.551\n 8 0.669\n 9 0.696\n10 0.581\n# ℹ 4,990 more rows\n```\n\n\n:::\n\n```{.r .cell-code}\nggplot(data = maxs_df, aes(x = maxs)) +\n  geom_histogram(colour = \"deeppink4\", fill = \"deeppink1\", bins = 20) +\n  theme_minimal() +\n  labs(x = \"Observed Sample Maxs\",\n       title = paste(\"Sampling Distribution of the \\nSample Max when n =\", n))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n\n```{.r .cell-code}\nmaxs_df |>\n  summarise(max_samp_dist = max(maxs),\n            var_samp_dist = var(maxs),\n            sd_samp_dist = sd(maxs))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  max_samp_dist var_samp_dist sd_samp_dist\n          <dbl>         <dbl>        <dbl>\n1         0.999       0.00217       0.0466\n```\n\n\n:::\n:::\n\n\n\n#### Summary Table\n\n|   | $\\text{N}(\\mu = 10, \\sigma^2 = 4)$ | $\\text{Unif}(\\theta_1 = 7, \\theta_2 = 13)$ | $\\text{Exp}(\\lambda = 0.5)$ | $\\text{Beta}(\\alpha = 8, \\beta = 2)$ |\n|:-------------:|:-------------:|:-------------:|:-------------:|:-------------:|\n| $\\text{E}(Y_{min})$ | 8.45 | 7.7 | 0.25 | 0.578 |\n| $\\text{E}(Y_{max})$ | 16.51 | 12.58 | 4.10 | 0.906 |\n|  |  |  |  |  |\n| $\\text{SE}(Y_{min})$ | 2.68 | 0.849 | 0.40 | 0.105 |\n| $\\text{SE}(Y_{max})$ | 2.67 | 0.848 | 2.39 | 0.046 |\n\n: Table of Results {.striped .hover}\n\n#### Question 2:\n\n## PDF for Min\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 5\n## CHANGE 0 and 3 to represent where you want your graph to start and end\n## on the x-axis\nx <- seq(0, 3, length.out = 1000)\n\n## PDF denstity\ndensity <- n * exp(-(1/2) * x)^4 * 0.5 * exp(-(1/2) * x)\n\n\n## put into tibble and plot\nsamp_min_df <- tibble(x, density)\nggplot(data = samp_min_df, aes(x = x, y = density)) +\n  geom_line() +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n\n## PDF for Max\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 5\n## CHANGE 0 and 3 to represent where you want your graph to start and end\n## on the x-axis\nx <- seq(0, 15, length.out = 1000)\n\n## PDF denstity\ndensity <- n * (-exp(-(1/2) * x) + 1)^4 * 0.5 * exp(-(1/2) * x)\n\n\n## put into tibble and plot\nsamp_max_df <- tibble(x, density)\nggplot(data = samp_max_df, aes(x = x, y = density)) +\n  geom_line() +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n\n## Questions\n1) The values for $SE(Y_{min})$ and $SE(Y_{max})$ closely resemble one another under both the normal and uniform distribution models, which are symmetric. However, they differ greatly under the exponential and beta distribution models, which are unsymmetric. Thus, in general $SE(Y_{min})$ ≠ $SE(Y_{max})$ for an unsymmetric distribution model and $SE(Y_{min})$ ≃ $SE(Y_{max})$ for a symmetric distribution model.\n\n2) The values for $SE(Y_{min})$ and $E(Y_{max})$ between the simulation and theoretical calculations are very similar to one another. The $E(Y_{min})$) and $E(Y_{max})$ are also similar, but not as closely as the standard error comparisons, which makes sense since these values are more influenced by the varying individual values in a generated sampling distribution. In other words, running the simulation multiple times results in a standard error resembling the theoretical calculations and an expectation relatively close, but often noticeably above or below its theoretical counterpart. \n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}